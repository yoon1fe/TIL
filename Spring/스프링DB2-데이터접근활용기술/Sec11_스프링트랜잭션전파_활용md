## 예제 프로젝트 요구사항

**비즈니스 요구 사항**

- 회원 등록/조회
- 회원에 대한 변경 이력을 추적할 수 있도록 회원 데이터가 변경될 때 변경 이력을 DB LOG 테이블에 저장



**`MemberService.java**

``` java
package hello.springtx.propagation;

@Slf4j
@Service
@RequiredArgsConstructor
public class MemberService {

  private final MemberRepository memberRepository;
  private final LogRepository logRepository;

  public void joinV1(String username) {
    Member member = new Member(username);
    Log logMessage = new Log(username);

    log.info("== memberRepository 호출 시작 ==");
    memberRepository.save(member);
    log.info("== memberRepository 호출 종료 ==");

    log.info("== logRepository 호출 시작 ==");
    logRepository.save(logMessage);
    log.info("== logRepository 호출 종료 ==");
  }

  public void joinV2(String username) {
    Member member = new Member(username);
    Log logMessage = new Log(username);

    log.info("== memberRepository 호출 시작 ==");
    memberRepository.save(member);
    log.info("== memberRepository 호출 종료 ==");

    log.info("== logRepository 호출 시작 ==");
    try {
      logRepository.save(logMessage);
    } catch (RuntimeException e) {
      log.info("log 저장에 실패했습니다. logMessage={}",
          logMessage.getMessage());
      log.info("정상 흐름 변환");
    }
    
    log.info("== logRepository 호출 종료 ==");
  }
}
```

- `joinV1()`
  - 현재 트랜잭션 X
- `joinV2()`
  - DB 로그 저장시 예외가 발생하면 예외 복구
  - 현재 트랜잭션 X



**JPA와 데이터 변경**

- JPA를 통한 모든 데이터 변경(등록, 수정, 삭제)에는 트랜잭션이 필요하다.



## 커밋, 롤백

#### 서비스 계층에 트랜잭션이 없을 때 - 커밋

- 서비스 계층에 트랜잭션 없음
- 회원, 로그 레포지토리가 각각 트랜잭션을 갖고 있음
- 회원, 로그 레포지토리 둘다 커밋 성공



``` java
/**
 * MemberService @Transactional:OFF
 * MemberRepository @Transactional:ON
 * LogRepository @Transactional:ON
 */
@Test
void outerTxOff_success() {
 //given
 String username = "outerTxOff_success";
 //when
 memberService.joinV1(username);
 //then: 모든 데이터가 정상 저장된다.
 assertTrue(memberRepository.find(username).isPresent());
 assertTrue(logRepository.find(username).isPresent());
}
```



#### 서비스 계층에 트랜잭션이 없을 때 - 롤백

- 서비스 계층에 트랜잭션 X
- 회원, 로그 레포지토리가 각각 트랜잭션을 갖고 있음
- 회원 레포지토리 정상 / 로그 레포지토리 예외 발생



``` java
/**
 * MemberService @Transactional:OFF
 * MemberRepository @Transactional:ON
 * LogRepository @Transactional:ON Exception
 */
@Test
void outerTxOff_fail() {
 //given
 String username = "로그예외_outerTxOff_fail";
  
 //when
 assertThatThrownBy(() -> memberService.joinV1(username))
 .isInstanceOf(RuntimeException.class);
  
 //then: 완전히 롤백되지 않고, member 데이터가 남아서 저장된다.
 assertTrue(memberRepository.find(username).isPresent());
 assertTrue(logRepository.find(username).isEmpty());
}
```

- `LogRepository`에서 런타임 예외 발생
- 트랜잭션 AOP는 해당 런타임 예외를 확인하고 롤백 처리



**`LogRepository` 응답 로직**

1. LogRepository 는 트랜잭션C와 관련된 con2 를 사용한다. 
2. 로그예외 라는 이름을 전달해서 LogRepository 에 런타임 예외가 발생한다. 
3. LogRepository 는 해당 예외를 밖으로 던진다. 이 경우 트랜잭션 AOP가 예외를 받게된다. 
4. 런타임 예외가 발생해서 트랜잭션 AOP는 트랜잭션 매니저에 롤백을 호출한다. 
5. 트랜잭션 매니저는 신규 트랜잭션이므로 물리 롤백을 호출한다.



이 경우 회원은 저장되지만, 회원 이력 로그는 롤백된다. 따라서 데이터 정합성에 문제가 발생할 수 있다. 둘을 하나의 트랜잭션으로 묶어서 처리해보자.



## 단일 트랜잭션

**트랜잭션 하나만 사용하기!**

- 회원 / 로그 레포지토리를 하나의 트랜잭션으로 묶는 가장 간단한 방법은 이 둘을 호출하는 회원 서비스에만 트랜잭션을 적용하는 것!

``` java
/**
 * MemberService @Transactional:ON
 * MemberRepository @Transactional:OFF
 * LogRepository @Transactional:OFF
 */
@Test
void singleTx() {
 //given
 String username = "singleTx";
  
 //when
 memberService.joinV1(username);
  
 //then: 모든 데이터가 정상 저장된다.
 assertTrue(memberRepository.find(username).isPresent());
 assertTrue(logRepository.find(username).isPresent());
}
```

- `MemberService` 에만 트랜잭션 적용하면 시작~종료까지 모든 로직을 하나의 트랜잭션으로 묶을 수 있다.
- 논리 / 물리 트랜잭션, 외부 / 내부 트랜잭션 같은 복잡한 경우 고민할 필요 없음.
- `MemberService`만 트랜잭션을 사용하기 때문에 `MemberRepository`, `LogRepository`는 트랜잭션 AOP가 적용되지 않는다. 다만 같은 커넥션을 사용하면서 자연스럽게 트랜잭션 범위에 포함됨.



**참고**

- 같은 스레드를 사용하면 트랜잭션 동기화 매니저는 같은 커넥션을 반환한다.



각각 트랜잭션이 필요하면 어떡하지???? 만약 `MemberService`를 통해서가 아니라 직접 레포지토리의 메서드를 호출하는 경우도 있을 수 있는데, 이럴때는 트랜잭션 적용이 안된다.

트랜잭션 전파 없이 이런 문제를 해결하려면 트랜잭션이 있는 메서드와 트랜잭션이 없는 메서드를 각각 만들어야 할 것....

+) `MemberService`를 호출하는 또 다른 클래스에서도 트랜잭션을 시작할 수 있어야 한다...

-> **이런 문제를 해결하기 위해 트랜잭션 전파가 필요하다!!**











## 전파 커밋

스프링은 `@Transactional` 이 적용되어 있으면 디폴트로 `REQUIRED` 전파 옵션을 사용한다. 이 옵션은 기존 트랜잭션이 없으면 새로 생성하고, 있으면 기존 트랜잭션에 참여한다는 뜻. 기존 트랜잭션에 참여한다는 것은 같은 동기화 커넥션을 사용한다는 의미!

둘 이상의 트랜잭션이 하나의 물리 트랜잭션에 묶이게 되면 둘을 구분하기 위해 논리 트랜잭션과 물리 트랜잭션으로 구분한다. 

- 외부 트랜잭션: `MemberService`
- 내부 트랜잭션: `~Repository`



``` java
  /**
   * MemberService @Transactional:ON
   * MemberRepository @Transactional:ON
   * LogRepository @Transactional:ON
   */
  @Test
  void outerTxOn_success() {
    //given
    String username = "outerTxOn_success";
    
    //when
    memberService.joinV1(username);
    
    //then: 모든 데이터가 정상 저장된다.
    assertTrue(memberRepository.find(username).isPresent());
    assertTrue(logRepository.find(username).isPresent());
  }
```



## 전파 롤백

로그 레포지토리에서 예외 발생해서 전체 트랜잭션이 롤백 되는 경우

``` java
  /**
   * MemberService @Transactional:ON
   * MemberRepository @Transactional:ON
   * LogRepository @Transactional:ON Exception
   */
  @Test
  void outerTxOn_fail() {
    //given
    String username = "로그예외_outerTxOn_fail";

    //when
    assertThatThrownBy(() -> memberService.joinV1(username))
        .isInstanceOf(RuntimeException.class);
    
    //then: 모든 데이터가 롤백된다.
    assertTrue(memberRepository.find(username).isEmpty());
    assertTrue(logRepository.find(username).isEmpty());
  }
```



회원과 회원 이력 로그를 처리하는 부분을 하나의 트랜잭션으로 묶은 덕분에 문제가 발생했을 때 회원과 회원 이력 로그가 모두 함께 롤백된다. 따라서 데이터 정합성에 문제가 발생하지 않는다.



## 복구 REQUIRED

데이터 정합성 문제는 해결을 했는데.. 이러면 로그 남기는 부분에서 문제가 발생했을때 회원 가입 자체가 안되게 된다. 따라서 수정된 요구 사항

- 회원 가입을 시도한 로그를 남기는데 실패하더라도 회원가입은 되도록 하자



**단순히 `MemberService`에서 예외 잡아서 처리?**

``` java
  /**
   * MemberService @Transactional:ON
   * MemberRepository @Transactional:ON
   * LogRepository @Transactional:ON Exception
   */
  @Test
  void recoverException_fail() {
    //given
    String username = "로그예외_recoverException_fail";

    //when
    assertThatThrownBy(() -> memberService.joinV2(username))
      .isInstanceOf(UnexpectedRollbackException.class);

    //then: 모든 데이터가 롤백된다.
    assertTrue(memberRepository.find(username).isEmpty());
    assertTrue(logRepository.find(username).isEmpty());
  }
```

- 회원에는 정상적으로 들어갈 거 같은데 여전히 안들어간다.
- 내부 트랜잭션에서 롤백 발생시 `rollbackOnly`가 설정되기 때문에 정상 흐름 처리해서 외부 트랜잭션에서 커밋을 호출해도 물리 트랜잭션을 롤백된다.
- 내부 트랜잭션이 롤백 되었는데, 외부 트랜잭션이 커밋되면 `UnexpectedRollbackException` 예외가 발생한다.



## 복구 REQUIRES_NEW

**회원 가입을 시도한 로그를 남기는데 실패해도 회원 가입은 완료되어야 한다!** - REQUIRES_NEW 옵션 사용해보자



``` java
  /**
   * MemberService @Transactional:ON
   * MemberRepository @Transactional:ON
   * LogRepository @Transactional(REQUIRES_NEW) Exception
   */
  @Test
  void recoverException_success() {
    //given
    String username = "로그예외_recoverException_success";

    //when
    memberService.joinV2(username);

    //then: member 저장, log 롤백
    assertTrue(memberRepository.find(username).isPresent());
    assertTrue(logRepository.find(username).isEmpty());
  }
```

- `MemberRepository`는 `REQUIRED` 옵션을 사용중이므로 기존 트랜잭션에 참여한다.
- `LogRepository.save()`에 `REQUIRES_NEW`
  - 항상 신규 트랜잭션을 생성!
  - 물리 트랜잭션 자체가 완전히 분리된다.

- **결과적으로 회원 데이터는 저장 / 로그 데이터만 롤백된다.**



논리 트랜잭션은 하나라도 롤백되면 관련된 물리 트랜잭션은 롤백되어 버린다. 이 문제를 해결하려면 REQUIRES_NEW 를 사용해서 트랜잭션을 분리해야 한다.



**주의**

- `REQUIRES_NEW` 를 사용하면 하나의 HTTP 요청에 동시에 2개의 데이터베이스 커넥션을 사용하게 된다.  따라서 성능이 중요한 곳에서는 이런 부분을 주의해서 사용해야 한다. 
- `REQUIRES_NEW` 를 사용하지 않고 문제를 해결할 수 있는 단순한 방법이 있다면, 그 방법을 선택하는 것이 더 좋다.